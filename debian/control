Source: golang-h12-socks
Maintainer: Debian Go Packaging Team <team+pkg-go@tracker.debian.org>
Uploaders: Guobang Bi <ymshenyu@gmail.com>
Section: devel
Testsuite: autopkgtest-pkg-go
Priority: optional
Build-Depends: debhelper-compat (= 12),
               dh-golang,
               golang-any
Standards-Version: 4.5.0
Vcs-Browser: https://salsa.debian.org/go-team/packages/golang-h12-socks
Vcs-Git: https://salsa.debian.org/go-team/packages/golang-h12-socks.git
Homepage: https://github.com/h12w/socks
Rules-Requires-Root: no
XS-Go-Import-Path: h12.io/socks

Package: golang-h12-socks-dev
Architecture: all
Depends: ${misc:Depends}
Description: A SOCKS (SOCKS4, SOCKS4A and SOCKS5) Proxy Package for Go (library)
 SOCKS GoDoc (https://godoc.org/h12.io/socks)
 .
 SOCKS is a SOCKS4, SOCKS4A and SOCKS5 proxy package for Go.  Quick
 StartGet the packagego get -u "h12.io/socks" Import the packageimport
 "h12.io/socks" Create a SOCKS proxy dialing functiondialSocksProxy
 := socks.Dial("socks5://127.0.0.1:1080?timeout=5s") tr
 := &http.Transport{Dial: dialSocksProxy} httpClient :=
 &http.Client{Transport: tr} Example ```go package main
 .
 import (
     "fmt" "io/ioutil" "log" "net/http"
 "h12.io/socks"
 .
 )
 .
 func main() {
     dialSocksProxy := socks.Dial("socks5://127.0.0.1:1080?timeout=5s") tr
     := &http.Transport{Dial: dialSocksProxy} httpClient
     := &http.Client{Transport: tr} resp, err :=
     httpClient.Get("http://www.google.com") if err != nil {
         log.Fatal(err)
     } defer resp.Body.Close() if resp.StatusCode != http.StatusOK {
         log.Fatal(resp.StatusCode)
     } buf, err := ioutil.ReadAll(resp.Body) if err != nil {
         log.Fatal(err)
     } fmt.Println(string(buf))
 } ```
